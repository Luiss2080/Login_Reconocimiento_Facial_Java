package com.reconocimiento.facial.servicios;

import com.reconocimiento.facial.dao.UsuarioDAO;
import com.reconocimiento.facial.dto.UsuarioDTO;
import com.reconocimiento.facial.modelos.Usuario;
import com.reconocimiento.facial.modelos.IntentoAcceso;
import com.reconocimiento.facial.seguridad.CifradorContrasenas;
import com.reconocimiento.facial.neural.RedNeuronalReconocimiento;

import java.awt.image.BufferedImage;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * üõ°Ô∏è SERVICIO COMPLETO DE GESTI√ìN DE USUARIOS
 * Incluye autenticaci√≥n dual: credenciales + reconocimiento facial
 * Integrado con red neuronal y sistema de auditor√≠a
 */
public class ServicioUsuarioMejorado {

    // ========== COMPONENTES DEL SERVICIO ==========
    private final UsuarioDAO usuarioDAO;
    private final CifradorContrasenas cifradorContrasenas;
    private final RedNeuronalReconocimiento redNeuronal;
    
    // ========== CONFIGURACIONES DE SEGURIDAD ==========
    private static final int MAX_INTENTOS_FALLIDOS = 5;
    private static final int TIEMPO_BLOQUEO_MINUTOS = 30;
    private static final double CONFIANZA_MINIMA_FACIAL = 0.85;

    /**
     * Constructor principal
     */
    public ServicioUsuarioMejorado() {
        try {
            this.usuarioDAO = new UsuarioDAO();
            this.cifradorContrasenas = new CifradorContrasenas();
            this.redNeuronal = new RedNeuronalReconocimiento();
            
            System.out.println("‚úÖ ServicioUsuario inicializado correctamente");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error inicializando ServicioUsuario: " + e.getMessage());
            throw new RuntimeException("Error cr√≠tico en ServicioUsuario", e);
        }
    }

    /**
     * üîê Autenticaci√≥n con credenciales tradicionales
     */
    public Optional<Usuario> autenticarUsuario(String nombreUsuario, String contrasena) {
        try {
            System.out.println("üîê Iniciando autenticaci√≥n por credenciales para: " + nombreUsuario);
            
            // Validar par√°metros
            if (nombreUsuario == null || nombreUsuario.trim().isEmpty()) {
                registrarIntentoFallido(null, IntentoAcceso.TipoAcceso.CONTRASENA, "Usuario vac√≠o");
                return Optional.empty();
            }
            
            if (contrasena == null || contrasena.isEmpty()) {
                registrarIntentoFallido(nombreUsuario, IntentoAcceso.TipoAcceso.CONTRASENA, "Contrase√±a vac√≠a");
                return Optional.empty();
            }
            
            // Buscar usuario en base de datos
            Optional<Usuario> usuarioOpt = usuarioDAO.buscarPorNombreUsuario(nombreUsuario);
            
            if (!usuarioOpt.isPresent()) {
                System.out.println("‚ùå Usuario no encontrado: " + nombreUsuario);
                registrarIntentoFallido(nombreUsuario, IntentoAcceso.TipoAcceso.CONTRASENA, "Usuario no existe");
                return Optional.empty();
            }
            
            Usuario usuario = usuarioOpt.get();
            
            // Verificar si el usuario est√° activo
            if (!usuario.isEstaActivo()) {
                System.out.println("üö´ Usuario inactivo: " + nombreUsuario);
                registrarIntentoFallido(nombreUsuario, IntentoAcceso.TipoAcceso.CONTRASENA, "Usuario inactivo");
                return Optional.empty();
            }
            
            // Verificar contrase√±a
            if (cifradorContrasenas.verificarContrasena(contrasena, usuario.getContrasenaCifrada())) {
                // Autenticaci√≥n exitosa
                System.out.println("‚úÖ Autenticaci√≥n exitosa para: " + nombreUsuario);
                
                // Actualizar √∫ltimo acceso
                usuario.registrarAcceso();
                
                // Registrar acceso exitoso
                registrarAccesoExitoso(usuario, IntentoAcceso.TipoAcceso.CONTRASENA, 1.0);
                
                return Optional.of(usuario);
                
            } else {
                // Contrase√±a incorrecta
                System.out.println("‚ùå Contrase√±a incorrecta para: " + nombreUsuario);
                registrarIntentoFallido(nombreUsuario, IntentoAcceso.TipoAcceso.CONTRASENA, "Contrase√±a incorrecta");
                return Optional.empty();
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en autenticaci√≥n por credenciales: " + e.getMessage());
            registrarIntentoFallido(nombreUsuario, IntentoAcceso.TipoAcceso.CONTRASENA, "Error del sistema: " + e.getMessage());
            return Optional.empty();
        }
    }

    /**
     * üì∑ Autenticaci√≥n con reconocimiento facial
     */
    public Optional<Usuario> autenticarConReconocimientoFacial(BufferedImage imagenRostro) {
        try {
            System.out.println("üì∑ Iniciando autenticaci√≥n por reconocimiento facial");
            
            if (imagenRostro == null) {
                System.err.println("‚ùå Imagen de rostro es null");
                registrarIntentoFallido(null, IntentoAcceso.TipoAcceso.FACIAL, "Imagen null");
                return Optional.empty();
            }
            
            // Usar la red neuronal para reconocer el usuario
            Optional<Usuario> usuarioReconocido = redNeuronal.reconocerUsuario(imagenRostro);
            
            if (usuarioReconocido.isPresent()) {
                Usuario usuario = usuarioReconocido.get();
                double confianza = redNeuronal.getUltimaConfianza();
                
                System.out.println("‚úÖ Reconocimiento facial exitoso: " + usuario.getNombreUsuario() + 
                                 " (Confianza: " + String.format("%.2f%%", confianza * 100) + ")");
                
                // Actualizar √∫ltimo acceso
                usuario.registrarAcceso();
                
                // Registrar acceso exitoso
                registrarAccesoExitoso(usuario, IntentoAcceso.TipoAcceso.FACIAL, confianza);
                
                return Optional.of(usuario);
                
            } else {
                System.out.println("‚ùå Rostro no reconocido o confianza insuficiente");
                registrarIntentoFallido(null, IntentoAcceso.TipoAcceso.FACIAL, "Rostro no reconocido");
                return Optional.empty();
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en autenticaci√≥n facial: " + e.getMessage());
            registrarIntentoFallido(null, IntentoAcceso.TipoAcceso.FACIAL, "Error del sistema: " + e.getMessage());
            return Optional.empty();
        }
    }

    /**
     * üë• Registrar nuevo usuario con datos biom√©tricos
     */
    public boolean registrarUsuarioCompleto(UsuarioDTO usuarioDTO, List<BufferedImage> muestrasFaciales) {
        try {
            System.out.println("üë• Iniciando registro completo para: " + usuarioDTO.getNombreUsuario());
            
            // Validar datos b√°sicos del usuario
            if (!validarDatosUsuario(usuarioDTO)) {
                System.err.println("‚ùå Datos de usuario inv√°lidos");
                return false;
            }
            
            // Verificar que no exista el usuario
            if (usuarioDAO.buscarPorNombreUsuario(usuarioDTO.getNombreUsuario()).isPresent()) {
                System.err.println("‚ùå El usuario ya existe: " + usuarioDTO.getNombreUsuario());
                return false;
            }
            
            if (usuarioDAO.buscarPorCorreo(usuarioDTO.getCorreoElectronico()).isPresent()) {
                System.err.println("‚ùå El correo ya est√° registrado: " + usuarioDTO.getCorreoElectronico());
                return false;
            }
            
            // Validar muestras faciales
            if (muestrasFaciales == null || muestrasFaciales.size() < 3) {
                System.err.println("‚ùå Se requieren al menos 3 muestras faciales");
                return false;
            }
            
            // Crear usuario
            Usuario nuevoUsuario = new Usuario();
            nuevoUsuario.setNombreUsuario(usuarioDTO.getNombreUsuario());
            nuevoUsuario.setNombreCompleto(usuarioDTO.getNombreCompleto());
            nuevoUsuario.setCorreoElectronico(usuarioDTO.getCorreoElectronico());
            nuevoUsuario.setContrasenaCifrada(cifradorContrasenas.cifrarContrasena(usuarioDTO.getContrasena()));
            nuevoUsuario.setEstaActivo(true);
            
            // Guardar en base de datos
            Usuario usuarioGuardado = usuarioDAO.guardarUsuario(nuevoUsuario);
            
            if (usuarioGuardado == null) {
                System.err.println("‚ùå Error guardando usuario en base de datos");
                return false;
            }
            
            // Registrar caracter√≠sticas faciales en la red neuronal
            boolean registroFacialExitoso = redNeuronal.registrarUsuario(
                usuarioDTO.getNombreUsuario(), 
                muestrasFaciales
            );
            
            if (!registroFacialExitoso) {
                System.err.println("‚ö†Ô∏è Error registrando caracter√≠sticas faciales, pero usuario creado");
                // Nota: El usuario puede usar solo login por credenciales
            }
            
            System.out.println("‚úÖ Usuario registrado exitosamente: " + usuarioDTO.getNombreUsuario());
            System.out.println("üìä Muestras faciales procesadas: " + muestrasFaciales.size());
            
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en registro completo: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * üîç Buscar usuario por nombre de usuario
     */
    public Optional<Usuario> buscarUsuario(String nombreUsuario) {
        try {
            return usuarioDAO.buscarPorNombreUsuario(nombreUsuario);
        } catch (Exception e) {
            System.err.println("‚ùå Error buscando usuario: " + e.getMessage());
            return Optional.empty();
        }
    }

    /**
     * ‚úÖ Validar datos b√°sicos del usuario
     */
    private boolean validarDatosUsuario(UsuarioDTO usuarioDTO) {
        if (usuarioDTO == null) return false;
        
        // Validar campos obligatorios
        if (usuarioDTO.getNombreUsuario() == null || usuarioDTO.getNombreUsuario().trim().isEmpty()) {
            System.err.println("‚ùå Nombre de usuario requerido");
            return false;
        }
        
        if (usuarioDTO.getNombreCompleto() == null || usuarioDTO.getNombreCompleto().trim().isEmpty()) {
            System.err.println("‚ùå Nombre completo requerido");
            return false;
        }
        
        if (usuarioDTO.getCorreoElectronico() == null || !usuarioDTO.getCorreoElectronico().contains("@")) {
            System.err.println("‚ùå Correo electr√≥nico inv√°lido");
            return false;
        }
        
        if (usuarioDTO.getContrasena() == null || usuarioDTO.getContrasena().length() < 6) {
            System.err.println("‚ùå Contrase√±a debe tener al menos 6 caracteres");
            return false;
        }
        
        return true;
    }

    /**
     * üìù Registrar intento de acceso fallido
     */
    private void registrarIntentoFallido(String nombreUsuario, IntentoAcceso.TipoAcceso tipoAcceso, String motivo) {
        try {
            IntentoAcceso intento = new IntentoAcceso();
            
            // Configurar datos del intento
            if (nombreUsuario != null) {
                intento.setNombreUsuario(nombreUsuario);
                
                // Intentar obtener ID del usuario
                Optional<Usuario> usuario = usuarioDAO.buscarPorNombreUsuario(nombreUsuario);
                if (usuario.isPresent()) {
                    intento.setIdUsuario(usuario.get().getIdUsuario());
                }
            }
            
            intento.setTipoAcceso(tipoAcceso);
            intento.setAccesoExitoso(false);
            intento.setFechaIntento(LocalDateTime.now());
            intento.setRazonFalla(motivo);
            
            // Log del intento
            System.out.println("üìù Intento fallido registrado: " + tipoAcceso + " - " + motivo);
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error registrando intento fallido: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ Registrar acceso exitoso
     */
    private void registrarAccesoExitoso(Usuario usuario, IntentoAcceso.TipoAcceso tipoAcceso, double confianza) {
        try {
            IntentoAcceso intento = new IntentoAcceso();
            intento.setIdUsuario(usuario.getIdUsuario());
            intento.setNombreUsuario(usuario.getNombreUsuario());
            intento.setTipoAcceso(tipoAcceso);
            intento.setAccesoExitoso(true);
            intento.setNivelConfianza(confianza);
            intento.setFechaIntento(LocalDateTime.now());
            
            // Log del acceso exitoso
            System.out.println("‚úÖ Acceso exitoso registrado: " + usuario.getNombreUsuario() + 
                             " (" + tipoAcceso + ", confianza: " + String.format("%.2f%%", confianza * 100) + ")");
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error registrando acceso exitoso: " + e.getMessage());
        }
    }

    /**
     * üìä Obtener estad√≠sticas del servicio
     */
    public String obtenerEstadisticas() {
        try {
            StringBuilder stats = new StringBuilder();
            stats.append("üõ°Ô∏è ESTAD√çSTICAS DEL SERVICIO DE USUARIOS\n");
            stats.append("=========================================\n");
            
            // Estad√≠sticas de la red neuronal
            stats.append(redNeuronal.obtenerEstadisticas());
            
            // Configuraciones de seguridad
            stats.append("\nüîí CONFIGURACIONES DE SEGURIDAD\n");
            stats.append("‚Ä¢ M√°x. intentos fallidos: ").append(MAX_INTENTOS_FALLIDOS).append("\n");
            stats.append("‚Ä¢ Tiempo de bloqueo: ").append(TIEMPO_BLOQUEO_MINUTOS).append(" minutos\n");
            stats.append("‚Ä¢ Confianza m√≠nima facial: ").append(String.format("%.2f%%", CONFIANZA_MINIMA_FACIAL * 100)).append("\n");
            
            return stats.toString();
            
        } catch (Exception e) {
            return "‚ùå Error obteniendo estad√≠sticas: " + e.getMessage();
        }
    }

    /**
     * üß™ Ejecutar pruebas del servicio
     */
    public void ejecutarPruebas() {
        System.out.println("üß™ Ejecutando pruebas del ServicioUsuario...");
        
        try {
            // Probar red neuronal
            redNeuronal.ejecutarPrueba();
            
            // Probar cifrado de contrase√±as
            String contrasenaTest = "password123";
            String hash = cifradorContrasenas.cifrarContrasena(contrasenaTest);
            boolean verificacion = cifradorContrasenas.verificarContrasena(contrasenaTest, hash);
            
            System.out.println("‚úÖ Prueba de cifrado: " + (verificacion ? "EXITOSA" : "FALLIDA"));
            
            System.out.println("‚úÖ Todas las pruebas completadas");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en pruebas: " + e.getMessage());
        }
    }

    /**
     * üîß Getters para componentes internos (para testing)
     */
    public RedNeuronalReconocimiento getRedNeuronal() { return redNeuronal; }
    public UsuarioDAO getUsuarioDAO() { return usuarioDAO; }
    public CifradorContrasenas getCifradorContrasenas() { return cifradorContrasenas; }
}